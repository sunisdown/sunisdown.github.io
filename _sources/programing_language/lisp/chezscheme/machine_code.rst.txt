ChezScheme Implementation
===============================

Chez Scheme does not employ a byte-code representation. The complier generates machine code directly, either in memory or to disk(via compile-file and related procedures). Nor does Chez Scheme have a VM in the sense of a program that interprets byte code. It does have a run-time architecure that dictates the structure of objects, the heap, stacks, thread context, etc. The generated machine code directly manipulates elements of the run-time architecture in cooperation with the storage manager and oter parts of the run-time system, just as one would expect the code generated by a JIT compiler for JVM code todo.

Some of the papers mentioned above describe how elements of Chez Scheme's run-time architecture are (or once were) structured and manipulated, and most of the structure is codified in s/cmacros.ss and c/globals.h, but the architecture is otherwise undocumented.

ChezScheme-issue-144_

.. _ChezScheme-issue-144: https://github.com/cisco/ChezScheme/issues/144
